#Al_bot

from re import *   # Loads the regular expression module.
import random
PUNTS = ['Please go on.',
         'Tell me more.',
         'I see.',
         'What does that indicate?',
         'But why be concerned about it?',
         'Just tell me how you feel.']
topics = ['let\'s talk about food.',
          'let\'s talk about video games.',
          'let\'s talk about deep learning.',
          'let\'s talk about weather.',
          'let\'s talk about computers.',
          'let\'s talk about traveling.',
          'let\'s talk about cars.',
          'let\'s talk about drinks.']

punt_count = 0 #define counters for remembering topics
def al():
    topic_dict = {'game':0, 'food': 0, 'dl': 0, 'weather': 0, 'computer': 0, 'travel': 0, 'car': 0,
                  'drink': 0}
    print('My friends call me the Al.')
    print('Welcome to my gaming room!')
    print('What do you want to talk about?')
    while True:
        the_input = input('TYPE HERE:>> ')
        if match('bye',the_input):
            print('Goodbye!')
            return
        wordlist = split(' ',remove_punctuation(the_input))
        # undo any initial capitalization:
        wordlist[0]=wordlist[0].lower()
        mapped_wordlist = you_me_map(wordlist)
        mapped_wordlist[0]=mapped_wordlist[0].capitalize()
        respond(topic_dict, the_input, wordlist, mapped_wordlist)

def respond(topic_dict,the_input, wordlist, mapped_wordlist):
    if wordlist[0]=='':
        print(random.choice(topics))
        return
    if wordlist[0:2] == ['i','am']:
        print("Please tell me why you are " +\
              stringify(mapped_wordlist[2:]) + '.')
        return
    if wpred(wordlist[0]):
        print("You tell me " + wordlist[0] + ".")
        return
    if wordlist[0:2] == ['i','have']:
        print("How long have you had " +\
              stringify(mapped_wordlist[2:]) + '.')
        return
    if wordlist[0:2] == ['i','feel']:
        print("I sometimes feel the same way.")
        return
    if 'because' in wordlist:
        print("Is that really the reason?")
        return
    if 'game' in wordlist or 'games' in wordlist or topic_dict['game'] != 0:

        if topic_dict['game'] == 0:
            topic_dict['game'] = 3
            print('What kind of video game do you like?')

        else:
            if 'fighting' in wordlist:
                print('I like fighting games, too.')
                return
            if 'like' in wordlist:
                print('I am crazy about that game, too!')
                return
            if 'favorite' in wordlist:
                print('My favorite game is Street Fighter')
                return
            if 'pc' in wordlist:
                print('I have built my own pc for gaming and deep learning')
                return
            if 'ps4' in wordlist:
                print('I use to have a ps4 but I sold it when I graduated from Indiana University.')
                return
            if 'xbox' in wordlist:
                print('I never own a xbox.')
                return
            print(punt())
            topic_dict['game'] -= 1
        return

    if 'food' in wordlist or topic_dict['food'] != 0:
        print(topic_dict,wordlist)
        if topic_dict['food'] == 0:
            topic_dict['food'] = 3
            print('What kind of food do you like?')

        else:

            if 'like' in wordlist:
                print('I am crazy about it, too!')
                return
            if 'favorite' in wordlist:
                print('My favorite food is Mexican food')
                return
            if 'pizza' in wordlist:
                print('I love pizza.')
                return
            if 'chinese' in wordlist:
                print('I usually make my own Chinese food at home.')
                return
            if 'japanese' in wordlist:
                print('I like takoyaki.')
                return
            if 'burger' in wordlist:
                print('Burgers are the best.')
                return
            print(punt())
            topic_dict['food'] -= 1
        return

    if 'yes' in wordlist:
        print("How can you be so sure?")
        return
    if wordlist[0:2] == ['you','are']:
        print("Oh yeah, I am " +\
              stringify(mapped_wordlist[2:]) + '.')
        return
    if verbp(wordlist[0]):
        print("Why do you want me to " +\
              stringify(mapped_wordlist) + '?')
        return
    if wordlist[0:3] == ['do','you','think']:
        print("I think you should answer that yourself.")
        return
    if wordlist[0:2]==['can','you'] or wordlist[0:2]==['could','you']:
        print("Perhaps I " + wordlist[0] + ' ' +\
             stringify(mapped_wordlist[2:]) + '.')
        return
    if 'dream' in wordlist:
        print("For dream analysis see Freud.")
        return
    if 'love' in wordlist:
        print("All's fair in love and war.")
        return
    if 'no' in wordlist:
        print("Don't be so negative.")
        return
    if 'maybe' in wordlist:
        print("Be more decisive.")
        return
    if 'you' in mapped_wordlist or 'You' in mapped_wordlist:
        print(stringify(mapped_wordlist) + '.')
        return
    print(punt())
def rand_game(): # random reply when topic is game

    lst = ['I used to play a lot of video games with my friend at college.',
           'Video games are very productive right now.',
           'My favorite genre is fighting game, at least for now.',
           'I mostly play on PC.']
    return random.choice(lst)

def stringify(wordlist):
    'Create a string from wordlist, but with spaces between words.'
    return ' '.join(wordlist)

punctuation_pattern = compile(r"\,|\.|\?|\!|\;|\:")

def remove_punctuation(text):
    'Returns a string without any punctuation.'
    return sub(punctuation_pattern,'', text)

def wpred(w):
    'Returns True if w is one of the question words.'
    return (w in ['when','why','where','how'])

def dpred(w):
    'Returns True if w is an auxiliary verb.'
    return (w in ['do','can','should','would'])


def punt():
    'Returns one from a list of default responses.'

    return random.choice(PUNTS)

CASE_MAP = {'i':'you', 'I':'you', 'me':'you','you':'me',
            'my':'your','your':'my',
            'yours':'mine','mine':'yours','am':'are'}

def you_me(w):
    'Changes a word from 1st to 2nd person or vice-versa.'
    try:
        result = CASE_MAP[w]
    except KeyError:
        result = w
    return result

def you_me_map(wordlist):
    'Applies YOU-ME to a whole sentence or phrase.'
    return [you_me(w) for w in wordlist]

def verbp(w):
    'Returns True if w is one of these known verbs.'
    return (w in ['go', 'have', 'be', 'try', 'eat', 'take', 'help',
                  'make', 'get', 'jump', 'write', 'type', 'fill',
                  'put', 'turn', 'compute', 'think', 'drink',
                  'blink', 'crash', 'crunch', 'add'])
if __name__ == '__main__':
    al()# Launch the program.
